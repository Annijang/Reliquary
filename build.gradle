plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.101'
    id "org.sonarqube" version "3.3"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

apply from: 'https://gist.githubusercontent.com/Technici4n/facbcdf18ce1a556b76e6027180c32ce/raw/059ab3d504a590461746fc6e3065159f4932a960/classremapper.gradle'

version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"
group = mod_group_id

repositories {
    mavenLocal()
    maven { url "https://dvs1.progwml6.com/files/maven" }
    maven { url "https://maven.latmod.com/" }
    maven { url "https://maven.thiakil.com" }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://maven.blamejared.com/" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
        //entry('public net.minecraft.world.item.crafting.ShapelessRecipe result #result')
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'mixin.env.disableRefMap', 'true'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "mezz.jei:jei-${jei_mc_version}:${jei_version}"
    runtimeOnly "mezz.jei:jei-${jei_mc_version}:${jei_version}"
    //compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
    //runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")
    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")    //deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"
    //deobfCompile "slimeknights:TConstruct:${tconstruct_version}"
    //deobfCompile "jeresources:JustEnoughResources-${minecraft_version}:${jer_version}"
    //deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"
    //deobfCompile "slimeknights:TConstruct:${tconstruct_version}"
    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"
    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"
    compileOnly "curse.maven:jade-324717:${jade_cf_file_id}"
    runtimeOnly "curse.maven:jade-324717:${jade_cf_file_id}"
    runtimeOnly "curse.maven:twilightforest-227639:5182539"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_issue_tracker_url: mod_issue_tracker_url, mod_logo_file: mod_logo_file, mod_credits: mod_credits,
            mod_authors         : mod_authors, mod_description: mod_description, mod_display_url: mod_display_url,
            mod_full_version    : "${project.mod_version}.${getBuildNumber()}${getStable()}"

    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(["Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : project.mod_id,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : project.mod_id,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

static def getBuildNumber() {
    if (System.getenv("GITHUB_RUN_NUMBER") != null) {
        return Integer.valueOf(Integer.parseInt(System.getenv("GITHUB_RUN_NUMBER")) + 950).toString()
    }
    return ""
}

static def getStable() {
    if ((System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev"))) {
        return "-dev"
    }
    return ""
}

publishing {
    repositories {
        maven {
            name = "ReliquaryMaven"
            url = uri("https://maven.pkg.github.com/P3pp3rF1y/Reliquary")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'reliquary'
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Reliquary"
        property "sonar.projectKey", "xreliquary:Reliquary"
    }
}

task printVersionName {
    println "version:" + project.version
}