buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        mavenCentral()
    }
    // This is only here while FG is under active development
    configurations.classpath {
        resolutionStrategy {
            cacheDynamicVersionsFor 10, "seconds"
            cacheChangingModulesFor 0, "seconds"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.+'
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
    id "maven-publish"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

repositories {
    mavenCentral()
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url "http://tehnut.info/maven" }
    maven { url "https://dl.bintray.com/way2muchnoise/dev" }
    maven { url "http://maven.thiakil.com" }
/*    ivy {
        name "Botania"
        ivyPattern 'http://www.google.com/FAKE_URL/ugly_workaround_because_curseforge_403.txt'
        artifactPattern "http://media.forgecdn.net/files/${project.botania_cf}/[module] r[revision].[ext]"
    }*/
}

group = 'xreliquary'
version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"
archivesBaseName = 'Reliquary'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: project.mcp_mappings
    runs {
        client {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run')
            mods {
                xreliquary {
                    source sourceSets.main
                }
            }
        }
        server {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run')
            mods {
                xreliquary {
                    source sourceSets.main
                }
            }
        }
        data {
            properties 'forge.logging.markers': 'REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            properties 'fml.earlyprogresswindow': 'false'
            workingDirectory project.file('run')
            mods {
                xreliquary {
                    source sourceSets.main
                }
            }
            args '--mod', 'xreliquary', '--all', '--output', file('src/generated/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    //deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}"
    //deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"
    //deobfCompile "slimeknights:TConstruct:${tconstruct_version}"
    //deobfCompile "info.amerifrance.guideapi:Guide-API:${guideapi_version}"
    //deobfCompile "mcp.mobius.waila:Hwyla:${hwyla_version}"
    //deobfCompile "jeresources:JustEnoughResources-${minecraft_version}:${jer_version}"
    //deobfCompile "com.azanor.baubles:Baubles:${baubles_version}"
    //deobfCompile name: 'Botania', version: botania_version, ext: 'jar'
    //deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"
    //deobfCompile "slimeknights:TConstruct:${tconstruct_version}"
    //compile name:'Thaumcraft', version: thaumcraft_version, ext: 'jar'

    testCompile 'org.testng:testng:6.9.10'
    testCompile "org.mockito:mockito-core:1.+"
    testCompile "org.powermock:powermock-mockito-release-full:1.6.2"
}

test {
    useTestNG()
}

task generateSources(type: Copy) {
    from 'src/replaceme/java'
    into "$buildDir/generated-src"
    filter { line -> line.replaceAll('@MOD_VERSION@', '${project.version}') }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "project_version", project.version
    inputs.property "minecraft_version", project.minecraft_version

    // Replace stuff in mcmod.info and in .lang files, nothing else.
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // Replace version and mcversion.
        expand 'project_version': project.version, 'minecraft_version': minecraft_version
    }

    // Copy everything else that wasn't replaced.
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def getBuildNumber() {
    if (System.getenv("BUILD_NUMBER") != null) {
        return System.getenv("BUILD_NUMBER").toString()
    }
    return ""
}

def getStable() {
    if ((System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev"))) {
        return "unstable"
    }
    return ""
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/P3pp3rF1y/Reliquary")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Reliquary"
        property "sonar.projectKey", "reliquary"
    }
}

