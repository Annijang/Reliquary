buildscript {
    repositories {
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+', changing: true
    }
}

plugins {
    id "org.sonarqube" version "3.3"
    id "maven-publish"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'idea'

repositories {
    mavenCentral()
    maven { url "https://dvs1.progwml6.com/files/maven" }
    maven { url "https://maven.latmod.com/" }
    maven { url "https://maven.thiakil.com" }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://maven.blamejared.com/" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

group = 'reliquary'
version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"
archivesBaseName = 'reliquary'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: 'parchment', version: "$parchment_version"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            property 'mixin.env.disableRefMap', 'true'
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
            jvmArg '-XX:HotswapAgent=fatjar'
            workingDirectory project.file('run')
            mods {
                reliquary {
                    source sourceSets.main
                }
            }
        }
        server {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            property 'mixin.env.disableRefMap', 'true'
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
            jvmArg '-XX:HotswapAgent=fatjar'
            workingDirectory project.file('run')
            mods {
                reliquary {
                    source sourceSets.main
                }
            }
        }
        data {
            properties 'forge.logging.markers': 'REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            property 'mixin.env.disableRefMap', 'true'
            properties 'fml.earlyprogresswindow': 'false'
            workingDirectory project.file('run')
            mods {
                reliquary {
                    source sourceSets.main
                }
            }
            args '--mod', 'reliquary', '--all', '--output', file('src/generated/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    //compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
    //runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")
    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")    //deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"
    //deobfCompile "slimeknights:TConstruct:${tconstruct_version}"
    //deobfCompile "jeresources:JustEnoughResources-${minecraft_version}:${jer_version}"
    //deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"
    //deobfCompile "slimeknights:TConstruct:${tconstruct_version}"
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("curse.maven:jade-324717:${jade_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_cf_file_id}")

//    compileOnly fg.deobf("curse.maven:tinkers-74072:3576393")
//    runtimeOnly fg.deobf("curse.maven:tinkers-74072:3576393")
//    compileOnly fg.deobf("curse.maven:mantle-74924:3576386")
//    runtimeOnly fg.deobf("curse.maven:mantle-74924:3576386")
}

task generateSources(type: Copy) {
    from 'src/replaceme/java'
    into "$buildDir/generated-src"
    filter { line -> line.replaceAll('@MOD_VERSION@', '${project.version}') }
}

jar {
    manifest {
        attributes(["Specification-Title"     : "reliquary",
                    "Specification-Vendor"    : "reliquary",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "reliquary",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

processResources {
    // Exclude datagenerator .cache directory
    exclude '.cache'

    filesMatching('META-INF/mods.toml') {
        filter {
            it.replaceAll("project_version", project.version.toString())
        }
    }
}

static def getBuildNumber() {
    if (System.getenv("GITHUB_RUN_NUMBER") != null) {
        return Integer.valueOf(Integer.parseInt(System.getenv("GITHUB_RUN_NUMBER")) + 950).toString()
    }
    return ""
}

static def getStable() {
    if ((System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev"))) {
        return "unstable"
    }
    return ""
}

publishing {
    repositories {
        maven {
            name = "ReliquaryMaven"
            url = uri("https://maven.pkg.github.com/P3pp3rF1y/Reliquary")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'reliquary'
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Reliquary"
        property "sonar.projectKey", "xreliquary:Reliquary"
    }
}

