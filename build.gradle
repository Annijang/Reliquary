// This simple grabs the latest 'forge' plugin, or ForgeGradle, from Forge's servers.
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1+"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.5"
}

// External properties
ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

// We apply the 'forge' plugin, so ForgeGradle can do it's stuff.
apply plugin: 'net.minecraftforge.gradle.forge'


group = 'xreliquary' // Your main package.
version = "${config.mod_version}.${getBuildNumber()}"
archivesBaseName = 'Reliquary'

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
	version = config.minecraft_version + "-" + config.forge_version
    mappings = config.mappings
    runDir = "run"
    replaceIn "reference/Reference.java"
    replace "@MOD_VERSION@", "${project.version}"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "project_version", project.version
    inputs.property "minecraft_version", config.minecraft_version

    // Replace stuff in mcmod.info and in .lang files, nothing else.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.lang'
        include 'mcmod.info'

        // Replace version and mcversion.
        expand 'project_version':project.version, 'minecraft_version':config.minecraft_version
    }

    // Copy everything else that wasn't replaced.
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.lang'
        exclude 'mcmod.info'
    }
}

def getBuildNumber() {
    if (System.getenv("DRONE_BUILD_NUMBER") != null) {
        return "${System.getenv("DRONE_BUILD_NUMBER")}"
    }
    return "UNSTABLE"
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    filesSpec {
        from 'build/libs'
        into '.'
        exclude '*sources.jar'
    }

    pkg {
        version {
            name='${project.version}'
            released = new Date()
        }
        repo = 'maven'
        name = 'Reliquary'
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/P3pp3rF1y/Reliquary.git'
    }

}